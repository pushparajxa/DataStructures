group 'flames'
version '1.0-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'scala'
apply plugin: 'idea'

sourceCompatibility = 1.11

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    compile 'org.scala-lang:scala-library:2.12.3', 'org.scalatest:scalatest_2.12:3.0.1',
            'org.testng:testng:6.11','org.apache.hadoop:hadoop-common:2.7.3','joda-time:joda-time:2.9.9'
    //compile ('org.redisson:redisson:3.7.6-SNAPSHOT')
    compile group: 'org.springframework.security.oauth', name: 'spring-security-oauth2', version: '2.2.0.RELEASE'
    compileOnly 'org.projectlombok:lombok:1.18.12'


    compile group: 'org.codehaus.groovy', name: 'groovy-all', version: '2.5.5', ext: 'pom'
    compile 'org.apache.commons:commons-text:1.9'
    compile 'org.apache.avro:avro:1.11.0'

    compile "com.fasterxml.jackson.core:jackson-databind:2.9.6"
    compile "com.fasterxml.jackson.module:jackson-module-parameter-names:2.9.6"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-jdk8:2.9.6"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.9.6"

    // , 'org.apache.commons:commons-lang3:3.7'
            // 'com.amazonaws:aws-java-sdk:1.7.4','org.apache.hadoop:hadoop-aws:2.7.3'
    testCompile "org.scala-lang:scala-library:2.12.3",'org.testng:testng:6.11'
    testCompile("org.junit.jupiter:junit-jupiter-engine:5.2.0")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.2.0")
    testRuntime("org.junit.platform:junit-platform-console:1.2.0")
    zinc 'com.typesafe.zinc:zinc:0.3.15'
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java']
        }
   /*     scala{
            srcDirs = ['src/main/scala']
        }*/
    }
    test {
        java {
            srcDirs = ['src/test/java']
        }
    }
}

jar{
   // sourceSets.getByName("main").getJava().srcDirs().name
   // println "SourceSet output directories are "+ sourceSets.compile.output.dirs.toSet().toString()
    archiveName = "aws.jar"
    from{
        configurations.compile.collect()
    }
    exclude '*scala*.jar'
    manifest{
        attributes("Main-Class":"Aws.class")
    }
    doLast{
        println sourceSets.getByName("main").output.dirs
    }
}

test {
    useJUnitPlatform()
}


task copyJarsToLib (type: Copy) {
    def toDir = "build/libs/dependency-jars"

    // create directories, if not already done:
    file(toDir).mkdirs()

    // copy jars to lib folder:
    from configurations.compile
    into toDir
}

tasks.withType(ScalaCompile) {
    enabled = false
}
tasks.withType(ProcessResources) {
    enabled = false
}

/*


task copyJarsToLib (type: Copy) {
    def toDir = "build/libs/dependency-jars"

    // create directories, if not already done:
    file(toDir).mkdirs()

    // copy jars to lib folder:
    from configurations.compile
    into toDir
}

jar {
    archiveName = "s273.jar"
    // exclude log properties (recommended)
    exclude ("log4j.properties")

    // make jar executable: see http://stackoverflow.com/questions/21721119/creating-runnable-jar-with-gradle
    manifest {
        attributes (
                'Main-Class': 'S3Test',
                // add classpath to Manifest; see http://stackoverflow.com/questions/30087427/add-classpath-in-manifest-file-of-jar-in-gradle
                "Class-Path": '. dependency-jars/' + configurations.compile.collect { it.getName() }.join(' dependency-jars/')
        )
    }
}

// always call copyJarsToLib when building jars:
jar.dependsOn copyJarsToLib

 */


