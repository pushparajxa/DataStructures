PUT   :: MUST be idemppotent
====
 - PUT operations should be idempotent. Even if we call PUT request n-times it should create or
 replace only one time

 - The URL should include the resource name


   Used to create a resource, or overwrite it, while you specify the resources URL.

   For a new resource:

   PUT /questions/<new_question> HTTP/1.1
   Host: whateverblahblah.com

   To overwrite an existing resource:

   PUT /questions/<existing_question> HTTP/1.1
   Host: whateverblahblah.com

   ...Yes, they are the same. PUT is often described as the 'edit' method, as by replacing the entire resource with a slightly altered version,
    you have edited what clients will GET when they next do.



    RFC 7231 Section 4.3.4 PUT
    ---------------------------------------

    The PUT method requests that the state of the target resource be created or replaced with the state defined by the representation enclosed
     in the request message payload.


PATCH:
================================
  + We use this method when we want to update only specific fields of a resource.
  + We sent Map<AttributeName, Value> as in input.
  + It is typically used for collections where
    - You want to update a specific field in all the objects in a collection, such as, task status
    in a collection tasks of batch.

  + When Sending a Complete Object with PATCH May Be Appropriate

        Dynamic Schema Requirements: If the backend supports dynamic object structures
         where fields may not always be present, and only non-null fields should be updated,
         you might use PATCH to send the full object, indicating changes without affecting unspecified fields.

        API-Specific Behavior: Some APIs are designed to use PATCH for both partial
          and full updates, treating fields that aren’t specified as “don’t change.”
          In these cases, the API could handle a complete object in PATCH without resetting data.

 + Response of a PATCH request
   + Should you send complete object or only that have been modified?
   + Using Prefer: header.
    * Prefer: return=representation || Prefer: return=minimal

      PATCH /item/123 HTTP/1.1
      Host: example.org
      Content-Type: application/example-patch
      Prefer: return=representation

      PATCH /item/123 HTTP/1.1
      Host: example.org
      Content-Type: application/example-patch
      Prefer: return=minimal


   + The "return=representation" preference indicates that the client prefers that the server
     include an entity representing the current state of the resource in the response to a successful request.

   + The "return=minimal" preference, on the other hand, indicates that the client wishes the
     server to return only a minimal response to a successful request



  # References:
    1. https://greenbytes.de/tech/webdav/rfc7240.html#return
    2. https://stackoverflow.com/questions/37718119/should-the-patch-method-return-all-fields-of-the-resource-in-the-response-body


POST : Used to create a resource
================================
 - This is not idempotent. Calling POST n times will create n resources
 - We should not include a resource that doesn't exist already in the URL.
 - We use this to create new resources given that resource id is specified.


   Note that the following is an error:

   POST /questions/<new_question> HTTP/1.1
   Host: whateverblahblah.com

   If the URL is not yet created, you should not be using POST to create it while specifying the name.
   This should result in a resource not found error because does not exist yet. You should PUT the resource on the server first.
   You could argue that by creating a new question, you are also updating the /questions resource as it would now return one more question
   in its list of questions.

   You should do something like this to create a resource using POST:

   POST /questions HTTP/1.1
   Host: whateverblahblah.com

   Note that in this case the resource name is not specified, the new objects URL path would be returned to you.


Reference:
    1. https://stackoverflow.com/questions/256349/what-are-the-best-common-restful-url-verbs-and-actions/256359#256359
    2. https://stackoverflow.com/questions/630453/what-is-the-difference-between-post-and-put-in-http


While chossing between POST and PUT, think in terms of idempotency. PUT operations must be
idempotent.


Updating a value RESTfully with POST vs PUT
======================================

Reference:
  1. https://stackoverflow.com/a/1575047/1171533