

Definitions of PUT, HEAD, GET, POST and DELETE are mentioned here
=================================================================
https://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9.1.2

Idempotent Methods
===================
* GET, HEAD, PUT and DELETE

* Reference
  - Section 9.1.2 * Section 9.1.2 https://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9.1.2

Non-Idempotent Methods
======================
* POST

* Reference
  - Section 9.1.2 https://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9.1.2

Safe Methods
=============
* GET, HEAD

* Reference
  - Section 9.1.2 https://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9.1.2


Difference between POST and PUT
========================================
The fundamental difference between the POST and PUT requests is reflected in the different meaning of the Request-URI.
The URI in a POST request identifies the resource that will handle the enclosed entity. That resource might be a
data-accepting process, a gateway to some other protocol, or a separate entity that accepts annotations.
In contrast, the URI in a PUT request identifies the entity enclosed with the request -- the user agent knows what URI
is intended and the server MUST NOT attempt to apply the request to some other resource. If the
server desires that the request be applied to a different URI,


HEAD    :: GET without message body. Headers in response should be same as that of GET.
=======
The HEAD method is used to ask only for information about a document, not for the document itself.
HEAD is much faster than GET, as a much smaller amount of data is transferred.
It's often used by clients who use caching, to see if the document has changed since it was last accessed.
If it was not, then the local copy can be reused, otherwise the updated version must be retrieved with a GET.
The meta information contained in the HTTP headers in response to a HEAD request should be identical
 to the information sent in response to a GET request.
This method can be used for obtaining meta information about the resource identified by the request
URI without transferring the data itself.
This method is often used for testing hypertext links for validity, accessibility, and recent modification.

Refer:
  - https://condor.depaul.edu/dmumaugh/readings/handouts/SE435/HTTP/node14.html
  - More about REST methods in Networking/REST/REST_Methods file

POST
    The POST method requests that the target resource process the representation enclosed in the request according
     to the semantics of the target resource. For example, it is used for posting a message to an Internet forum,
     subscribing to a mailing list, or completing an online shopping transaction.[55]

PUT
    The PUT method requests that the target resource create or update its state with the state defined by the
     representation enclosed in the request. A distinction from POST is that the client specifies the target
     location on the server.[56]

CONNECT
    The CONNECT method requests that the intermediary establish a TCP/IP tunnel to the origin server
     identified by the request target. It is often used to secure connections through one or more
     HTTP proxies with TLS.[57][58] See HTTP CONNECT method.

OPTIONS
    The OPTIONS method requests that the target resource transfer the HTTP methods that it supports.
     This can be used to check the functionality of a web server by requesting '*' instead of a specific resource.

TRACE
    The TRACE method requests that the target resource transfer the received request in the response body.
     That way a client can see what (if any) changes or additions have been made by intermediaries.
     (to headers)

OPTIONS
========

  It is generally used in CORS

Sample request
--------------

  OPTIONS /api/resource HTTP/1.1
  Host: example.com

Response will be like below
---------------------------

  HTTP/1.1 204 No Content
  Date: Wed, 28 Aug 2024 12:34:56 GMT
  Server: Apache/2.4.41 (Ubuntu)
  Allow: OPTIONS, GET, POST, PUT, DELETE
  Access-Control-Allow-Origin: *
  Access-Control-Allow-Methods: GET, POST, PUT, DELETE, OPTIONS
  Access-Control-Allow-Headers: Content-Type, Authorization
  Access-Control-Max-Age: 86400
  Content-Length: 0

  Use Cases:
  ---------

      CORS (Cross-Origin Resource Sharing): The OPTIONS method is often used in CORS preflight requests to
      determine if the server will allow a cross-origin request.

      Discovery: Clients can use the OPTIONS request to discover what actions are allowed on a particular resource.