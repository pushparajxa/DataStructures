API Gateway
============
It does many jobs, as mentioned here https://aws.amazon.com/api-gateway/features/

1. SDK Generation for API in different lanaguages
2. Metrics
3. Support both RESTFul and WebSocket APIs
4. Throttling and resiliency
5. API keys for third part developer integrations
6. Authorization by directing calls to IAM or Cognito
7. Protocol translation
  - Refer:
    + https://microservices.io/patterns/apigateway.html


  API Gateway:: Alex Wu Refer: https://x.com/bytebytego/status/1828653021095752052
  =====================
  Step 1 - The client sends an HTTP request to the API gateway.

  Step 2 - The API gateway parses and validates the attributes in the HTTP request.

  Step 3 - The API gateway performs allow-list/deny-list checks.

  Step 4 - The API gateway talks to an identity provider for authentication and authorization.

  Step 5 - The rate limiting rules are applied to the request. If it is over the limit, the request is rejected.

  Steps 6 and 7 - Now that the request has passed basic checks, the API gateway finds the relevant service to route to by path matching.

  Step 8 - The API gateway transforms the request into the appropriate protocol and sends it to backend microservices.

  Steps 9-12: The API gateway can handle errors properly, and deals with faults if the error takes a longer time to recover (circuit break).
                It can also leverage ELK (Elastic-Logstash-Kibana) stack for logging and monitoring. We sometimes cache data in the API gateway.

   Do we need to use different API gateways for PC, mobile and browser separately?
   ---------------------------------------------------------------------------------
   Depends on aspects such as security considerations for PC, Mobile or Browser.


   It's not strictly necessary to use different API gateways for PC, mobile, and browser clients, but there are scenarios where it might be beneficial.
   The decision depends on factors such as security, performance, and the specific requirements of each client type.

   ### When to Use a Single API Gateway:
   - **Unified Access Control:**
              If all clients (PC, mobile, browser) can use the same authentication and authorization mechanisms,
                a single API gateway simplifies management.
   - **Shared Logic:**
              If the business logic is the same across all clients, using a single API gateway reduces duplication and maintenance overhead.
   - **Consistency:**
              Ensures that all clients have access to the same APIs and services, making it easier to keep features and updates consistent.

   ### When to Use Separate API Gateways:
   - **Different Security Requirements:**
        Mobile apps might have different security needs (e.g., tighter controls, token-based authentication) compared to web browsers.
   - **Optimized Performance:**
      Mobile clients might require more efficient data formats (like compressed JSON) or need
      specific optimizations to reduce data transfer sizes. Separate gateways allow for such optimizations.
   - **Client-Specific Features:**
        If each client type (PC, mobile, browser) has unique features or workflows,
        separate gateways can tailor the API responses and functionality to suit each type.
   - **Traffic Management:**
          Separate gateways can help in traffic management, allowing different rate limits,
           throttling, or caching strategies for different clients.

   ### Hybrid Approach:
      Some organizations use a hybrid approach where a single API gateway handles common
      functionalities, but it routes requests to different backend services based on the client type.
      This allows for a balance between shared functionality and client-specific optimization.

      -- The userAgent attribute in the REST API request can be leveraged to divert the call to the
      specific/required service created for specific clients such as mobile, browser clients, PC

   In conclusion, while a single API gateway might be sufficient for many cases,
   using separate gateways can offer more control and optimization for different client types.
   The choice should be guided by your application's architecture, performance needs, and security considerations.

   Ref: 1. https://chatgpt.com/c/9f6128a3-d517-439d-87a2-366b1f4e85ae
        2. https://www.perplexity.ai/search/do-we-need-to-use-different-ga-rxCu9TaPSuOLbYC_YQLS2A#0
        3. https://www.designgurus.io/course-play/grokking-microservices-design-patterns/doc/the-architecture-of-the-bff-pattern


API Gateway vs Load balancer: https://stackoverflow.com/a/61619662/1171533
=============================================
API gateway predominately does API management and provides various other key features such as IAM (Identity and Access Management), Rate limiting,
circuit breakers. Hence, it mainly eliminates the need to implement API-specific code for functionalities such as security, caching, throttling, and
monitoring for each of the microservice.
Microservices typically expose the REST APIs for use in front ends, other microservices and 3rd party apps with help of API gateway.

However, normally, the API Management does not include load balancing function, so it should be used in conjunction with a load balancer to achieve the same.

In system architecture based on Azure, there is Azure Application Gateway which is a load balancer that runs on Layer 7 and
provides more features than traditional load balancer ( Layer 4 ) in terms of routing traffic using routing decisions based on additional attributes of
HTTP request or content of traffic. This can also be termed as an application load balancer. It shall be used in conjunction by Azure API Management
(API gateway).
 Azure has a Traffic Manager for operating at DNS level which uses DNS to direct client requests to the most appropriate service endpoint based on a
 traffic-routing
 method and the health of the endpoints. Traffic manager also uses the rules configured at the DNS
 level and enables distribution of the the load over multiple regions and data centers. Within every
  region or data center, there shall be application gateways coupled with load balancers such that,
the application gateways shall help in determining the application server to fetch response from and the load balancer shall help in load balancing.


# References
  - https://dashbird.io/blog/can-api-gateway-act-load-balancer/
  - https://www.reddit.com/r/aws/comments/z0o47i/what_is_the_difference_between_an_application/
