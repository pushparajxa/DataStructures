https://jack-vanlightly.com/analyses/2024/3/12/scaling-models-and-multi-tenant-data-systems-asds-chapter-6
=======
Data partitioning options
=============================


  There are three common data partitioning models used in multi-tenant systems: silo, bridge, and pool. There are pros and cons of how each model enforces isolation.

  Silo
  -----
    – A separate database instance per tenant provides the most separation at the expense of both
 higher infrastructure costs and a more complicated tenant setup because you will have to create and manage a new database instance for each tenant that onboards to your SaaS offering.

  Bridge
  -------
    – A second approach to partition tenant data is to share the same database instance but use a different schema for each tenant. The model can have cost savings due to resource sharing, but the maintenance and tenant setup can be quite complicated.


  Pool
  -----
    – The third partitioning model uses both a shared database instance and namespace. In this
design, all tenant data sits side-by-side, but each table or view contains a partitioning key (usually the tenant identifier), which you use to filter the data.
A pooled model saves the most on operational costs and reduces your infrastructure code and maintenance overhead. However, this model can be more difficult to enforce your data access policies, and is commonly implemented by hoping the correct WHERE clause is implemented in every SQL statement.



  RLS (Row Level Security policy from Postgres)
  ---------------------------------------------
    https://aws.amazon.com/blogs/database/multi-tenant-data-isolation-with-postgresql-row-level-security/




  Reference:
  ------
  1. https://aws.amazon.com/blogs/database/multi-tenant-data-isolation-with-postgresql-row-level
  -security/

  2. resources/multi-tenancy/multi-tenant-saas-storage-strategies.pdf


Preventing cross tenant access
===============================

  https://docs.aws.amazon.com/wellarchitected/latest/saas-lens/preventing-cross-tenant-access.html

  Ref:
  ----
   wellarchitected-saas-lens.pdf in the resources/multi-tenancy folder under section "Preventing
cross tenant access"



Hiding Tenant details from developers
=====================================
  https://docs.aws.amazon.com/wellarchitected/latest/saas-lens/layers-hide-tenant-details.html

  Ref:
  ----
      wellarchitected-saas-lens.pdf in the resources/multi-tenancy folder under section "Hiding
Tenant details from developers"
