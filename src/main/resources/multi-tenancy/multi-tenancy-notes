https://jack-vanlightly.com/analyses/2024/3/12/scaling-models-and-multi-tenant-data-systems-asds-chapter-6
=======

Definitions
===============
 https://docs.aws.amazon.com/wellarchitected/latest/saas-lens/definitions.html

Serverless Saas
==================
https://docs.aws.amazon.com/wellarchitected/latest/saas-lens/serverless-saas.html


 Tenant
 -------
  A tenant is the most fundamental construct of a SaaS environment. As a SaaS provider building an application, you are making this
  application available to your customers. Any customer that you sign up to use your SaaS environment is one of the tenants of your system.
  The sum total of all the customers using your SaaS environment are the tenants. Imagine, for example, that your organization has created an
   accounting service that you want to make available to other companies that will use your service to manage their businesses.
   Each one of these companies would be viewed as a tenant of your system.

 Upon signing up, a tenant will typically provide user information for the tenant administrator. This tenant administrator can then log into
 the system and configure it based on the needs of their business. This includes having the ability to add users to a given tenant environment.

 The software that is provided in this model is referred to as a multi-tenant SaaS system because each of the tenants of the service are
 consuming a single, shared system that supports the needs of these tenants through a unified experience. An update to the system, for example, would typically
 be applied to all tenants of that system.




Data partitioning options
=============================


  There are three common data partitioning models used in multi-tenant systems: silo, bridge, and pool. There are pros and cons of how each model enforces isolation.

  Silo
  -----
    – A separate database instance per tenant provides the most separation at the expense of both
 higher infrastructure costs and a more complicated tenant setup because you will have to create and manage a new database instance for each tenant that onboards to your SaaS offering.

  Bridge
  -------
    – A second approach to partition tenant data is to share the same database instance but use a different schema for each tenant. The model can have cost savings due to resource sharing, but the maintenance and tenant setup can be quite complicated.


  Pool
  -----
    – The third partitioning model uses both a shared database instance and namespace. In this
design, all tenant data sits side-by-side, but each table or view contains a partitioning key (usually the tenant identifier), which you use to filter the data.
A pooled model saves the most on operational costs and reduces your infrastructure code and maintenance overhead. However, this model can be more difficult to enforce your data access policies, and is commonly implemented by hoping the correct WHERE clause is implemented in every SQL statement.



  RLS (Row Level Security policy from Postgres)
  ---------------------------------------------
    https://aws.amazon.com/blogs/database/multi-tenant-data-isolation-with-postgresql-row-level-security/




  Reference:
  ------
  1. https://aws.amazon.com/blogs/database/multi-tenant-data-isolation-with-postgresql-row-level
  -security/

  2. resources/multi-tenancy/multi-tenant-saas-storage-strategies.pdf


Preventing cross tenant access
===============================

  https://docs.aws.amazon.com/wellarchitected/latest/saas-lens/preventing-cross-tenant-access.html

  Ref:
  ----
   wellarchitected-saas-lens.pdf in the resources/multi-tenancy folder under section "Preventing
cross tenant access"



Hiding Tenant details from developers
=====================================
  https://docs.aws.amazon.com/wellarchitected/latest/saas-lens/layers-hide-tenant-details.html

  Ref:
  ----
      wellarchitected-saas-lens.pdf in the resources/multi-tenancy folder under section "Hiding
Tenant details from developers"
